{"version":3,"sources":["Threecanvas.js","Three.js","App.js","reportWebVitals.js","index.js"],"names":["scene","camera","renderer","Three","canvasRef","useRef","useState","w","h","size","setSize","resized","current","clientWidth","clientHeight","useEffect","window","addEventListener","removeEventListener","aspect","updateProjectionMatrix","resizeCanvas","THREE","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","render","canvas","appendChild","domElement","removeChild","className","ref","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"+LAEIA,EAAOC,EAAQC,E,2EC6BJC,EA3BD,WACV,IAAMC,EAAYC,iBAAO,MACzB,EAAwBC,mBAAS,CAAEC,EAAG,EAAGC,EAAG,IAA5C,mBAAOC,EAAP,KAAaC,EAAb,KAEMC,EAAU,WACZD,EAAQ,CAAEH,EAAGH,EAAUQ,QAAQC,YAAaL,EAAGJ,EAAUQ,QAAQE,gBAgBrE,OAdAC,oBAAUJ,EAAS,IACnBI,qBAAU,WAEN,OADAC,OAAOC,iBAAiB,SAAUN,GAC3B,kBAAMK,OAAOE,oBAAoB,SAAUP,OAEtDI,qBAAU,YDaK,SAACN,GACZR,GAAUC,IACVD,EAAOkB,OAASV,EAAKF,EAAIE,EAAKD,EAC9BP,EAAOmB,yBACPlB,EAASQ,QAASD,EAAKF,EAAGE,EAAKD,IChB/Ba,CAAaZ,MAEjBM,qBAAU,WACN,IAAIb,EDhBC,WACTF,EAAQ,IAAIsB,IACZrB,EAAS,IAAIqB,IAAyB,GAAI,EAAG,GAAK,MAClDpB,EAAW,IAAIoB,KAENZ,QAAQ,EAAG,GAEpB,IAAIa,EAAW,IAAID,IAAmB,EAAG,EAAG,GACxCE,EAAW,IAAIF,IAAyB,CAAEG,MAAO,QACjDC,EAAO,IAAIJ,IAAYC,EAAUC,GAarC,OAXAxB,EAAM2B,IAAKD,GACXzB,EAAO2B,SAASC,EAAI,EAEN,SAAVC,IACFC,sBAAuBD,GACvBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IACnBhC,EAASiC,OAAQnC,EAAOC,GAE1B6B,GAEO5B,ECNYkC,GAEf,OADAhC,EAAUQ,QAAQyB,YAAYnC,EAASoC,YAChC,kBAAMlC,EAAUQ,QAAQ2B,YAAarC,EAASoC,eACtD,IAGC,qBAAKE,UAAU,UAAUC,IAAKrC,KChBvBsC,MAPf,WACC,OACC,cAAC,EAAD,KCOaC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASjB,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.a50f95ea.chunk.js","sourcesContent":["import * as THREE from \"three\";\n\nvar scene, camera, renderer;\n\nlet canvas = () => {\n    scene = new THREE.Scene();\n    camera = new THREE.PerspectiveCamera( 75, 1, 0.1, 1000);\n    renderer = new THREE.WebGLRenderer();\n    \n    renderer.setSize(0, 0);\n    \n    var geometry = new THREE.BoxGeometry( 1, 1, 1 );\n    var material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\n    var cube = new THREE.Mesh( geometry, material );\n    \n    scene.add( cube );\n    camera.position.z = 5;\n    \n    var animate = function () {\n      requestAnimationFrame( animate );\n      cube.rotation.x += 0.01;\n      cube.rotation.y += 0.01;\n      renderer.render( scene, camera );\n    };\n    animate();\n\n    return renderer;\n};\n\nlet resizeCanvas = (size) => {\n    if (camera && renderer) {\n        camera.aspect = size.w / size.h;\n        camera.updateProjectionMatrix();\n        renderer.setSize( size.w, size.h );\n    }\n} \n\nexport {canvas, resizeCanvas};","import { useEffect, useRef, useState } from 'react';\nimport {canvas, resizeCanvas} from './Threecanvas';\nimport './Three.css';\n\nconst Three = () => {\n    const canvasRef = useRef(null);\n    const [size, setSize] = useState({ w: 0, h: 0});\n\n    const resized = () => {\n        setSize({ w: canvasRef.current.clientWidth, h: canvasRef.current.clientHeight });\n    };\n    useEffect(resized, []);\n    useEffect(() => {\n        window.addEventListener('resize', resized);\n        return () => window.removeEventListener('resize', resized);\n    });\n    useEffect(() => {\n        resizeCanvas(size);\n    });\n    useEffect(() => {\n        let renderer = canvas();        \n        canvasRef.current.appendChild(renderer.domElement);\n        return () => canvasRef.current.removeChild( renderer.domElement);\n    }, []);\n\n    return (\n        <div className='threejs' ref={canvasRef}>\n        </div>\n    );\n}\n\nexport default Three;","import './App.css';\nimport Three from './Three';\n\nfunction App() {\n\treturn (\n\t\t<Three>\n\t\t</Three>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}